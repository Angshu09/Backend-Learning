---> in package.json file start, test, restart and stop command has some special treatment like if we type "npm start" or "npm test" then it will work. In the same time if we have any other key in the script like "hi" : "ls" and if we type npm hi then it will not going to work. we have to type npm run hi.



---> The command node --watch app.js is used to start a Node.js application (app.js) in a watch mode. This watch mode automatically restarts the application whenever changes are detected in the source files. It's particularly useful during development to avoid manually restarting the application after every code change.



---> Semantic Versioning (SemVer) is a versioning scheme that uses the format MAJOR.MINOR.PATCH to convey the nature of changes in a software release. The MAJOR version increases with incompatible API changes, MINOR with backward-compatible new features, and PATCH with backward-compatible bug fixes. Optional pre-release (-alpha, -beta) and build metadata (+build123) labels provide additional context. SemVer helps developers understand update impacts, manage dependencies, and maintain compatibility, making it a standard practice in software development.



---> The package-lock.json file is auto-generated by npm to lock the exact versions of dependencies and their sub-dependencies, ensuring consistent and reproducible installations across environments. It complements package.json by specifying the resolved versions and metadata, making builds predictable and improving performance while aiding in dependency security.




---> The ^ in npm versions (e.g., ^4.17.1) allows updates within the same major version, meaning it accepts versions >=4.17.1 and <5.0.0. This provides flexibility to include minor and patch updates (e.g., 4.18.0 or 4.17.2) while avoiding breaking changes from new major versions.



---> ^4.2.1: Installs the latest version >=4.2.1 but <5.0.0, allowing updates within the same major version (e.g., 4.2.3, 4.9.0).

~4.2.1: Installs the latest version >=4.2.1 but <4.3.0, allowing updates within the same minor version (e.g., 4.2.5).

<4.2.1: Installs the highest version strictly less than 4.2.1 (e.g., 4.2.0, 4.1.9).

>4.2.1: Installs the lowest version strictly greater than 4.2.1 (e.g., 4.2.2 or higher).

<=4.2.1: Installs the highest version less than or equal to 4.2.1 (e.g., 4.2.1, 4.2.0).

>=4.2.1: Installs the lowest version greater than or equal to 4.2.1 (e.g., 4.2.1, 4.3.0).

*: Installs the latest version available, regardless of major, minor, or patch differences.


---> The package.json file is a key configuration file in Node.js projects, containing metadata like the project's name, version, description, and author, along with dependencies (dependencies for runtime and devDependencies for development tools). It also defines custom scripts (e.g., npm start, npm test) to automate tasks, manages versioning for dependencies, and may include configurations for tools like eslint or babel. This file ensures consistent project setup, simplifies collaboration, and enables efficient management of dependencies and automation tasks.


---> devDependencies in a Node.js project are packages required only during the development phase, such as testing, linting, or build tools. They are listed under the "devDependencies" section in package.json and are installed using npm install --save-dev or npm install -D. These dependencies are not included in production environments, making them ideal for tools like eslint, jest, or webpack, which are essential for development but not needed for the app to run in production.